package {    import flash.display.Sprite;    import flash.display.Graphics;    import flash.events.Event;    import flash.media.Sound;    import flash.media.SoundChannel;    import flash.media.SoundMixer;    import flash.net.URLRequest;    import flash.utils.ByteArray;    import flash.text.TextField;    import flash.system.Security;    import flash.external.*;    public class Spectrum extends Sprite {        public function Spectrum() {            Security.allowDomain("*");             ExternalInterface.addCallback("ready", ready);            ready();        }                public function ready() {            var snd:Sound = new Sound();            var req:URLRequest = new URLRequest("./mp3/All_Alone.mp3");            snd.load(req);                        var channel:SoundChannel;            channel = snd.play();            addEventListener(Event.ENTER_FRAME, onEnterFrame);            channel.addEventListener(Event.SOUND_COMPLETE, onPlaybackComplete);        }                public var iterator:Number = 0;        private function onEnterFrame(event:Event):void {            var bytes:ByteArray = new ByteArray();            SoundMixer.computeSpectrum(bytes, false, 0);                                                    iterator++            if(iterator==10) {                iterator=0;                ExternalInterface.call("couchoud.thumper.thump", bytes.readFloat());                ExternalInterface.call("couchoud.thumper.thump", bytes.readFloat());            }            /*                        var g:Graphics = this.graphics;                        g.clear();                   g.lineStyle(0, 0x6600CC);            g.beginFill(0x6600CC);            g.moveTo(0, PLOT_HEIGHT);                        var n:Number = 0;                        for (var i:int = 0; i < CHANNEL_LENGTH; i++) {                n = (bytes.readFloat() * PLOT_HEIGHT);                g.lineTo(i * 2, PLOT_HEIGHT - n);            }            g.lineTo(CHANNEL_LENGTH * 2, PLOT_HEIGHT);            g.endFill();             g.lineStyle(0, 0xCC0066);            g.beginFill(0xCC0066, 0.5);            g.moveTo(CHANNEL_LENGTH * 2, PLOT_HEIGHT);                        for (i = CHANNEL_LENGTH; i > 0; i--) {                n = (bytes.readFloat() * PLOT_HEIGHT);                g.lineTo(i * 2, PLOT_HEIGHT - n);            }              g.lineTo(0, PLOT_HEIGHT);            g.endFill();*/        }                private function onPlaybackComplete(event:Event):void {            removeEventListener(Event.ENTER_FRAME, onEnterFrame);        }    }}